

name: Spring Boot Gradle CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    # services:
    #   eureka:
    #     image: sallyphaan/eureka:latest
    #     ports:
    #       - 8761:8761
        
    #   postservice:
    #     image: sallyphaan/postservice:latest
    #     ports:
    #       - 9090:8082
    #     options: --link eureka
    #   authservice:
    #     image: sallyphaan/authenticationcc:latest
    #     ports:
    #       - 9091:8081
    #     options: --link eureka
    #   mysql-auth:
    #     image: mysql:8.0
    #     env:
    #       MYSQL_ROOT_PASSWORD: Halan2021!
    #       MYSQL_DATABASE: authenticationcc
    #     ports:
    #       - 3307:3306
    
    steps:
      
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Set MongoDB environment variables
        env:
          SPRING_DATA_MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: echo "MongoDB URI set"

      - name: Build with Gradle
        run: ./gradlew build
        env:
          SPRING_DATA_MONGODB_URI: ${{ secrets.MONGODB_URI }}
     
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Set MongoDB environment variables
        env:
          SPRING_DATA_MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: echo "MongoDB URI set"

      - name: Run Tests with Gradle
        run: ./gradlew test
        env:
          SPRING_DATA_MONGODB_URI: ${{ secrets.MONGODB_URI }}
  integrationTest:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out the code
        uses: actions/checkout@v3
  
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
  
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-
  
      - name: Make gradlew executable
        run: chmod +x ./gradlew
  
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
  
      - name: Pull Post Service Image from Docker Hub
        run: docker pull sallyphaan/postservice:latest
  
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
  
      - name: Set up Docker Compose
        run: |
          sudo curl -SL https://github.com/docker/compose/releases/download/v2.17.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
  
      - name: Set up and run Docker Compose with Postservice
        run: |
          # Start only the Postservice container
          docker-compose -f docker-compose.yml up -d postservice
  
      - name: Wait for Postservice to be ready
        run: |
          # Optional: Wait for the Postservice to be ready (adjust timing as needed)
          sleep 30  # Or use other strategies like curl to check the health endpoint
  
      - name: Run Tests with Gradle
        run: ./gradlew integrationtest
  
      - name: Shut down Docker Compose
        run: |
          docker-compose down
  sonar:
    runs-on: ubuntu-latest
    needs: [test,integrationTest]
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Set MongoDB environment variables
        env:
          SPRING_DATA_MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: echo "MongoDB URI set"
      - name: SonarCloud Scan
        env: 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonar
  snyk:
    runs-on: ubuntu-latest
    needs: sonar
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Make gradlew executable
        run: chmod +x ./gradlew   
    
     
      - name: Install Snyk CLI via npm
        run: npm install -g snyk

      
      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

    
      - name: Snyk Vulnerability Test
        run: snyk test 
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      
      - name: Snyk Monitor for Continuous Tracking
        run: snyk monitor
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  docker:
   runs-on: ubuntu-latest
   needs: snyk
   steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Make gradlew executable
        run: chmod +x ./gradlew   

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
             username: ${{ secrets.REGISTRY_USERNAME }}
             password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Build Docker image
        run: docker build -t sallyphaan/postservice:latest .
      - name: Push Docker image
        run: |
            docker push sallyphaan/postservice:latest
             
            
