name: Spring Boot Gradle CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Set MongoDB environment variables
        env:
          SPRING_DATA_MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: echo "MongoDB URI set"

      - name: Build with Gradle
        run: ./gradlew build
        env:
          SPRING_DATA_MONGODB_URI: ${{ secrets.MONGODB_URI }}

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Set MongoDB environment variables
        env:
          SPRING_DATA_MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: echo "MongoDB URI set"

      - name: Run Tests with Gradle
        run: ./gradlew test
        env:
          SPRING_DATA_MONGODB_URI: ${{ secrets.MONGODB_URI }}

  sonar:
    runs-on: ubuntu-latest
    needs: build

    # Start SonarQube using Docker
    services:
      sonarqube:
        image: sonarqube:latest
        ports:
          - 9000:9000
        options: > 
          --health-cmd='curl -f http://localhost:9000 || exit 1'
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Wait for SonarQube to be ready
        run: |
          echo "Waiting for SonarQube to be available..."
          until curl -s http://localhost:9000/api/system/health | grep -q '"health":"GREEN"'; do
            sleep 5
          done
          echo "SonarQube is ready!"

      - name: Run SonarQube Analysis
        run: ./gradlew clean build sonar \
             -Dsonar.host.url=http://localhost:9000 \
             -Dsonar.login=sqa_cf9e61cc7c61cdea5dee7423af042d45d8cd5bca

      # - name: sonar scan
      #   run: ./gradlew clean build sonar --info \
      #   env:
      #     SPRING_DATA_MONGODB_URI: ${{ secrets.MONGODB_URI }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
            
