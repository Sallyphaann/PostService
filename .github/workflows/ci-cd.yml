name: Spring Boot Gradle CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Set MongoDB environment variables
        env:
          SPRING_DATA_MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: echo "MongoDB URI set"

      - name: Build with Gradle
        run: ./gradlew build
        env:
          SPRING_DATA_MONGODB_URI: ${{ secrets.MONGODB_URI }}
     
         
      
     
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Set MongoDB environment variables
        env:
          SPRING_DATA_MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: echo "MongoDB URI set"

      - name: Run Tests with Gradle
        run: ./gradlew test
        env:
          SPRING_DATA_MONGODB_URI: ${{ secrets.MONGODB_URI }}
  sonar:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Set MongoDB environment variables
        env:
          SPRING_DATA_MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: echo "MongoDB URI set"
      - name: SonarCloud Scan
        env: 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonar
  security:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - uses: actions/checkout@v3

      # Step 2: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Set JAVA_HOME explicitly
      - name: Set JAVA_HOME
        run: |
          echo "JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))" >> $GITHUB_ENV
          echo "JAVA_HOME set to: $JAVA_HOME"

      # Step 4: Verify Java installation
      - name: Verify Java installation
        run: java -version

      # Step 5: Cache Gradle dependencies
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # Step 6: Make gradlew executable
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # Step 7: Build with Gradle (optional but recommended)
      - name: Build with Gradle
        run: ./gradlew build

      # Step 8: Run Snyk to check for vulnerabilities
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/gradle-jdk17@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          JAVA_HOME: ${{ env.JAVA_HOME }}
      
 
  # snyk:
  #   runs-on: ubuntu-latest
  #   needs: sonar
  #   steps:
  #     - name: Check out the code
  #       uses: actions/checkout@v3

  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v3
  #       with:
  #         distribution: 'temurin'
  #         java-version: '17'

  #     - name: Cache Gradle packages
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.gradle/caches
  #         key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
  #         restore-keys: |
  #           gradle-${{ runner.os }}-

  #     - name: Make gradlew executable
  #       run: chmod +x ./gradlew

  #     - name: Set MongoDB environment variables
  #       env:
  #         SPRING_DATA_MONGODB_URI: ${{ secrets.MONGODB_URI }}
  #       run: echo "MongoDB URI set"
     
      # - name: Run Snyk to check for vulnerabilities
      #   uses: actions/checkout@v4
      #   with:
      #     args: test --severity-threshold=high
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      # - name: Monitor project with Snyk
      #   uses: actions/checkout@v4
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
     
            
