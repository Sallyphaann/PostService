

name: Spring Boot Gradle CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Set MongoDB environment variables
        env:
          SPRING_DATA_MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: echo "MongoDB URI set"

      - name: Build with Gradle
        run: ./gradlew build
        env:
          SPRING_DATA_MONGODB_URI: ${{ secrets.MONGODB_URI }}
     
         
      
     
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Set MongoDB environment variables
        env:
          SPRING_DATA_MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: echo "MongoDB URI set"

      - name: Run Tests with Gradle
        run: ./gradlew test
        env:
          SPRING_DATA_MONGODB_URI: ${{ secrets.MONGODB_URI }}
  integrationTest:
    runs-on: ubuntu-latest
    needs: build
    services:
        mysql:
          image: mysql:8.0
          env:
            MYSQL_ROOT_PASSWORD: Halan2021!
            MYSQL_DATABASE: userservice
          ports:
            - 3308:3306
          networks:
            - app-network
    
        mysql-auth:
          image: mysql:8.0
          env:
            MYSQL_ROOT_PASSWORD: Halan2021!
            MYSQL_DATABASE: authenticationcc
          ports:
            - 3307:3306
          networks:
            - app-network
    
        rabbitmq:
          image: rabbitmq:3-management
          ports:
            - 15672:15672
            - 5672:5672
          env:
            - RABBITMQ_DEFAULT_USER=guest
            - RABBITMQ_DEFAULT_PASS=guest
            - RABBITMQ_DEFAULT_VHOST=/
          networks:
            - app-network
    
        postservice:
          image: sallyphaan/postservice:latest
          ports:
            - 8082:8082
          environment:
            SPRING_DATASOURCE_URL: mongodb+srv://postservice:Halan2021@cluster0.u0jye.mongodb.net/postservice?retryWrites=true&w=majority&ssl=true&appName=Cluster0
          networks:
            - app-network
    
        userservice:
          image: userservice
          ports:
            - 8083:8083
          environment:
            SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/userservice
            SPRING_DATASOURCE_USERNAME: root
            SPRING_DATASOURCE_PASSWORD: Halan2021!
            SPRING_JPA_HIBERNATE_DDL_AUTO: update
            SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.MySQL8Dialect
            SPRING_RABBITMQ_HOST: rabbitmq
            SPRING_RABBITMQ_PORT: 5672
            SPRING_RABBITMQ_USERNAME: guest
            SPRING_RABBITMQ_PASSWORD: guest
          depends_on:
            - mysql
            - rabbitmq
          command: ["./wait-for-it.sh", "mysql:3306", "--", "./wait-for-it.sh", "rabbitmq:5672", "--", "java", "-jar", "userservice.jar"]
          networks:
            - app-network
    
        authservice:
          image: authservice
          ports:
            - 8081:8081
          environment:
            - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-auth:3306/authenticationcc
            - SPRING_DATASOURCE_USERNAME=root
            - SPRING_DATASOURCE_PASSWORD=Halan2021!
            - SPRING_JPA_HIBERNATE_DDL_AUTO=update
            - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.MySQL8Dialect
            - SPRING_RABBITMQ_HOST=rabbitmq
            - SPRING_RABBITMQ_PORT=5672
            - SPRING_RABBITMQ_USERNAME=guest
            - SPRING_RABBITMQ_PASSWORD=guest
          depends_on:
            - mysql-auth
            - rabbitmq
          command: ["./wait-for-it.sh", "mysql-auth:3306", "--", "./wait-for-it.sh", "rabbitmq:5672", "--", "java", "-jar", "authservice.jar"]
          networks:
            - app-network
    
    steps:
        - name: Check out the code
          uses: actions/checkout@v3
    
        - name: Set up JDK 17
          uses: actions/setup-java@v3
          with:
            distribution: 'temurin'
            java-version: '17'
    
        - name: Cache Gradle packages
          uses: actions/cache@v3
          with:
            path: ~/.gradle/caches
            key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
            restore-keys: |
              gradle-${{ runner.os }}-
    
        - name: Make gradlew executable
          run: chmod +x ./gradlew
    
        - name: Run Tests with Gradle
          run: ./gradlew test
    
        - name: Build and Run authservice container
          run: |
            docker build -t authservice ./authservice
            docker run -d -p 8081:8081 --name authservice-container \
              -e SPRING_DATASOURCE_URL=jdbc:mysql://mysql-auth:3306/authenticationcc \
              -e SPRING_DATASOURCE_USERNAME=root \
              -e SPRING_DATASOURCE_PASSWORD=Halan2021! \
              -e SPRING_RABBITMQ_HOST=rabbitmq \
              -e SPRING_RABBITMQ_PORT=5672 \
              -e SPRING_RABBITMQ_USERNAME=guest \
              -e SPRING_RABBITMQ_PASSWORD=guest \
              authservice
    
        - name: Build and Run postservice container
          run: |
            docker build -t postservice ./postservice
            docker run -d -p 8082:8082 --name postservice-container postservice

  
  sonar:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Set MongoDB environment variables
        env:
          SPRING_DATA_MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: echo "MongoDB URI set"
      - name: SonarCloud Scan
        env: 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonar
  snyk:
    runs-on: ubuntu-latest
    needs: sonar
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Make gradlew executable
        run: chmod +x ./gradlew   
    
     
      - name: Install Snyk CLI via npm
        run: npm install -g snyk

      
      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

    
      - name: Snyk Vulnerability Test
        run: snyk test 
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      
      - name: Snyk Monitor for Continuous Tracking
        run: snyk monitor
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  docker:
   runs-on: ubuntu-latest
   needs: snyk
   steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Make gradlew executable
        run: chmod +x ./gradlew   

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
             username: ${{ secrets.REGISTRY_USERNAME }}
             password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Build Docker image
        run: docker build -t sallyphaan/postservice:latest .
      - name: Push Docker image
        run: |
            docker push sallyphaan/postservice:latest
             
            
